/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { forwardRef, useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { PerspectiveCamera, useGLTF } from "@react-three/drei";
import shipUrl from "../assets/ship.glb?url"
import { useFrame } from "@react-three/fiber";

export const Ship = ({ camera }) => {
  const { nodes, materials } = useGLTF(shipUrl);
  const shipRef = useRef();

  const [rotation, setRotation] = useState({ x: 0, y: 0 });
  const [velocity, setVelocity] = useState(0);
  const [isMoving, setIsMoving] = useState(false);

  const calculateIdealOffset = () => {
    const idealOffset = new THREE.Vector3(0, 20, -30);
    const worldQuaternion = new THREE.Quaternion();
    shipRef.current.getWorldQuaternion(worldQuaternion);
    idealOffset.applyQuaternion(worldQuaternion);
    idealOffset.add(shipRef.current.getWorldPosition(new THREE.Vector3()));
    return idealOffset;
  };
  
  const calculateIdealLookat = () => {
    const idealLookat = new THREE.Vector3(0, 10, 50);
    const worldQuaternion = new THREE.Quaternion();
    shipRef.current.getWorldQuaternion(worldQuaternion);
    idealLookat.applyQuaternion(worldQuaternion);
    idealLookat.add(shipRef.current.getWorldPosition(new THREE.Vector3()));
    return idealLookat;
  };

  useFrame((state, delta) => {
    const quaternion = new THREE.Quaternion();
    const pitch = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), rotation.x);
    const yaw = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotation.y);
    quaternion.multiplyQuaternions(shipRef.current.quaternion, yaw.multiply(pitch));
    shipRef.current.setRotationFromQuaternion(quaternion);

    const direction = new THREE.Vector3();
    shipRef.current.getWorldDirection(direction);

    shipRef.current.position.x += direction.x * velocity;
    shipRef.current.position.y += direction.y * velocity;
    shipRef.current.position.z += direction.z * velocity;


    const idealOffset = calculateIdealOffset();
    const idealLookat = calculateIdealLookat();

    // const t = 1.0 - Math.pow(0.001, delta);

    // currentPosition.lerp(idealOffset, t);
    // currentLookAt.lerp(idealLookat, t);

    state.camera.position.copy(idealOffset);
    state.camera.lookAt(idealLookat);
    state.camera.updateProjectionMatrix();
  });

  useEffect(() => {
    const handleKeyDown = (event) => {
      const rotationSpeed = 0.02;
      const movementSpeed = 0.05;
      if (isMoving) { // Add this line
        switch (event.key) {
          case 'ArrowUp':
            setRotation((r) => ({ ...r, x: -rotationSpeed }));
            break;
          case 'ArrowDown':
            setRotation((r) => ({ ...r, x: rotationSpeed }));
            break;
          case 'ArrowLeft':
            setRotation((r) => ({ ...r, y: rotationSpeed }));
            break;
          case 'ArrowRight':
            setRotation((r) => ({ ...r, y: -rotationSpeed }));
            break;
          case ' ':
            setVelocity(movementSpeed);
            break;
        }
      }
      if (event.key === ' ') { // Add this line
        setIsMoving(true); // Add this line
        setVelocity(movementSpeed);
      }
    };

    const handleKeyUp = (event) => {
      switch (event.key) {
        case 'ArrowUp':
        case 'ArrowDown':
          setRotation((r) => ({ ...r, x: 0 }));
          break;
        case 'ArrowLeft':
        case 'ArrowRight':
          setRotation((r) => ({ ...r, y: 0 }));
          break;
        case ' ':
          setIsMoving(false); // Add this line
          setVelocity(0);
          break;
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
    };
  }, [isMoving]);

  return (
    <group ref={shipRef} dispose={null} scale={0.01}
      position={[- 3.5, -2, 5.5]}
      rotation-y={Math.PI}
      rotation-x={-0.7}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials.Material}
        position={[0.12, 36.35, -1]}
        scale={[0.86, 0.21, 1.38]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube003.geometry}
        material={materials.Material}
        position={[0.16, 36.9, -3.82]}
        rotation={[-0.07, 0, 0]}
        scale={[1.36, 0.15, 2.9]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube004.geometry}
        material={materials.Material}
        position={[0.13, 38.19, -18.66]}
        rotation={[-0.05, 0, 0]}
        scale={[1.32, 1.13, 1.94]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={materials["Material.004"]}
        position={[0, 36.1, -20.51]}
        scale={[2.93, 1.02, 0.77]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube007.geometry}
        material={materials["Material.002"]}
        position={[0.08, 38, -31.08]}
        scale={[1.49, 1.05, 5.18]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube009.geometry}
        material={materials["Material.004"]}
        position={[2.77, 34.37, -0.92]}
        rotation={[0, -0.19, 0]}
        scale={[0.16, 1.06, 1.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[3.14, 34.31, -0.82]}
        rotation={[0, -0.2, -1.56]}
        scale={[0.24, 0.34, 0.24]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube010.geometry}
        material={materials["Material.002"]}
        position={[4.22, 34.3, -0.55]}
        rotation={[0, -0.19, 0]}
        scale={[0.83, 0.86, 1.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder002.geometry}
        material={materials.Material}
        position={[3.65, 34.17, 0.4]}
        rotation={[1.58, 0, 0.21]}
        scale={0.56}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube019.geometry}
        material={materials.Material}
        position={[0.37, 40.96, -39.32]}
        rotation={[-0.16, 0, 0]}
        scale={[1.68, 1.1, 2.4]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube011.geometry}
        material={materials["Material.004"]}
        position={[-2.78, 34.25, -1]}
        rotation={[0, 0.19, 0]}
        scale={[-0.16, 1.06, 1.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder001.geometry}
        material={nodes.Cylinder001.material}
        position={[-3.15, 34.19, -0.9]}
        rotation={[0, 0.2, 1.56]}
        scale={[-0.24, 0.34, 0.24]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube012.geometry}
        material={materials["Material.002"]}
        position={[-4.23, 34.18, -0.63]}
        rotation={[0, 0.19, 0]}
        scale={[-0.83, 0.86, 1.02]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder003.geometry}
        material={materials.Material}
        position={[-3.66, 34.05, 0.32]}
        rotation={[1.58, 0, -0.21]}
        scale={[-0.56, 0.56, 0.56]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials["Material.001"]}
        position={[0, 33.79, 0]}
        scale={2.52}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube015.geometry}
        material={materials["Material.001"]}
        position={[7.03, 34.22, -1.88]}
        rotation={[0, 0, 0.26]}
        scale={[1, 0.38, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube016.geometry}
        material={materials["Material.001"]}
        position={[-8.08, 34.22, -1.33]}
        rotation={[0, 0, -0.26]}
        scale={[-1, 0.38, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials["Material.003"]}
        position={[0.06, 35.69, -9.24]}
        scale={[1.78, 0.53, 10.96]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube006.geometry}
        material={materials["Material.003"]}
        position={[0.13, 36.07, -26.67]}
        scale={[3.02, 1.08, 6.23]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube008.geometry}
        material={materials["Material.003"]}
        position={[0.2, 39.47, -37.7]}
        scale={[2.76, -0.38, 4.06]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube013.geometry}
        material={materials["Material.003"]}
        position={[5.09, 34.93, -6.93]}
        rotation={[0, -0.4, 0]}
        scale={[0.59, 0.92, 2.09]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube014.geometry}
        material={materials["Material.003"]}
        position={[-5.06, 34.93, -6.65]}
        rotation={[0, 0.39, 0]}
        scale={[-0.59, 0.92, 2.09]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube017.geometry}
        material={materials["Material.003"]}
        position={[12.68, 31.2, -16.37]}
        scale={[4.77, -2.69, 1.92]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube018.geometry}
        material={materials["Material.003"]}
        position={[-13.09, 31.03, -16.01]}
        scale={[-4.77, -2.69, 1.92]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube020.geometry}
        material={materials["Material.003"]}
        position={[-0.21, 38.13, -40.24]}
        scale={[3.47, 1.08, 4.46]}
      />
    </group>
  );
}

useGLTF.preload(shipUrl)

