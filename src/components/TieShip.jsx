/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Mickael Boitte (https://sketchfab.com/boittemike1)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/3d-tie-fighter-star-wars-model-5375de94c2484ab0b2a2bd75aa63c2b4
Title: 3D T.I.E Fighter - Star Wars model
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Matrix4, Quaternion, Vector3 } from "three";
import { updatePlaneAxis } from "../controls";


// Vectors applied to rotate the ship when controls are used
const x = new Vector3(1, 0, 0)
const y = new Vector3(0, 1, 0)
const z = new Vector3(0, 0, 1)

export const planePosition = new Vector3(0, 0, 0)

const delayedRotationMatrix = new Matrix4()
const delayedQuaternion = new Quaternion()

export function Model(props) {

  const { nodes, materials } = useGLTF("3d_t.i.e_fighter_-_star_wars_model.glb");

  const groupRef = useRef()

  useFrame(({ camera }) => {
    updatePlaneAxis(x, y, z, planePosition, camera);

    const rotationMatrix = new Matrix4().makeBasis(x, y, z);


    // Position the model
    const matrix = new Matrix4()
      .multiply(new Matrix4().makeTranslation(planePosition.x, planePosition.y, planePosition.z))
      .multiply(rotationMatrix)
    groupRef.current.matrixAutoUpdate = false;
    groupRef.current.matrix.copy(matrix);
    groupRef.current.matrixWorldNeedsUpdate = true;

    // The delayed effect when turning
    const quaternionA = new Quaternion().copy(delayedQuaternion)
    const quaternionB = new Quaternion()
    quaternionB.setFromRotationMatrix(rotationMatrix)

    const interpolationFactor = 0.175;
    const interpolatedQuaternion = new Quaternion().copy(quaternionA)
    interpolatedQuaternion.slerp(quaternionB, interpolationFactor)
    delayedQuaternion.copy(interpolatedQuaternion)

    delayedRotationMatrix.identity()
    delayedRotationMatrix.makeRotationFromQuaternion(delayedQuaternion)

    // Position the camera
    const cameraMatrix = new Matrix4()
      .multiply(new Matrix4().makeTranslation(planePosition.x, planePosition.y, planePosition.z))
      .multiply(delayedRotationMatrix)
      .multiply(new Matrix4().makeRotationX(-0.2))
      .multiply(new Matrix4().makeTranslation(0, 0.015, 0.5))

    camera.matrixAutoUpdate = false;
    camera.matrix.copy(cameraMatrix);
    camera.matrixWorldNeedsUpdate = true;
  })



  return (
    <group ref={groupRef} {...props}>
      <group
        rotation={[0, 0, 0]}
        scale={0.01}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials["Material.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials["Material.003"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("3d_t.i.e_fighter_-_star_wars_model.glb");
